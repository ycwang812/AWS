Systems Operations on AWS v1.1


++++ Lab 6: Backup - Linux ++++


This file contains the UserData content that you need to complete the Backup-Linux lab.

To use this file:

1. Locate the section you need. Each section in this file matches a section in the lab instructions.

2. Replace items in brackets - [] - with appropriate values. For example, in this command you would replace the value - [JobFlowID] - (including the brackets) with the parameter indicated in the lab instructions: 

   elastic-mapreduce --list [JobFlowID]

3. Do NOT enable the Word Wrap feature in Windows Notepad or the text editor you use to view this file.


==================================================================================================================

 Part 1: Point-In-Time Restore Of an RDS Instance from An Automated Scheduled backup

==================================================================================================================

Connect to the bastion host (Private key .pem file shall be downloaded from the qwiklab main lab page)

=================================================================================================================
ssh -i [qwiklab-xxxxxx] ec2-user@[Public-IP-Of-Bastion-Host]
==================================================================================================================

Get the IP Address of the MySQL server , From the bastion host $ prompt:

==================================================================================================================
aws ec2 describe-instances --filters 'Name=tag-value,Values="MySQL Database Server"' --output table
==================================================================================================================

From the Bastion $ prompt, login to the MySQL server:

==================================================================================================================
aws rds describe-db-instances --output table
==================================================================================================================

From the MySQL EC2 Instance, Describe the MySQL RDS Instances:

==================================================================================================================
aws rds describe-db-instances
==================================================================================================================

From the MySQL EC2 Instance, Describe the MySQL RDS Instances (Table Output):

==================================================================================================================
aws rds describe-db-instances --output table
==================================================================================================================

Example: grep command to filter the output and extract Endpoint name:

==================================================================================================================
aws rds describe-db-instances --output table | grep Address
==================================================================================================================

Connect to the RDS Instance:

==================================================================================================================
mysql -u root -pAWSLabPassword$ -h <RDS-ENDPOINT>  AWSLab
==================================================================================================================

Execute the SQL Statement, from the MySQL Prompt:

==================================================================================================================
select * from table_timestamp;
==================================================================================================================

To Recover the RDS Instance to the latest point-in-time copy:

==============================================================================================================================================================
aws rds restore-db-instance-to-point-in-time --source-db-instance-identifier [DBInstanceIdentifier-Recorded-On-Step21-Above] --target-db-instance-identifier myRestoredDB --use-latest-restorable-time --db-subnet-group-name [DBSubnetGroupName Recorded-On-Step21-Above]
==============================================================================================================================================================

Get the Status of the new Restored DB:

==================================================================================================================
aws rds describe-db-instances --db-instance-identifier myrestoreddb --output table | grep DBInstanceStatus
==================================================================================================================

Get the source instance security group ID (Should start with sg):

========================================================================================================================
aws rds describe-db-instances --db-instance-identifier [Recorded-On-Step21-Above] --output table| grep VpcSecurityGroupId
========================================================================================================================

Change the restored Instance security group to match the source instance’s SG:

====================================================================================================================
aws rds modify-db-instance --db-instance-identifier myRestoredDB --vpc-security-group-ids [sg-XXXXX-Extracted-Above]
====================================================================================================================

Record the Endpoint Name of the newly Restored RDS Instance:

==================================================================================
aws rds describe-db-instances --db-instance-identifier myRestoredDB | grep Address
==================================================================================

Connect to the restored DB Instance:

=================================================================
mysql -u root -pAWSLabPassword$ -h [RESTORED-RDS-ENDPOINT] AWSLab
=================================================================

To verify the restore execute the below:

==================================================================================================================
select * from table_timestamp;
==================================================================================================================

==================================================================================================================

 Part 2: Scheduled MySQL Backups using mysqldump and S3 As Backup Off-Site Storage

==================================================================================================================

List all buckets:

=================================================================
aws s3 ls s3://
=================================================================

Configure and create our MySQL awslab database:

=================================================================
cd ~
sudo chmod +x ./sysops-backup-linux-mysql-db.sh
sudo ./sysops-backup-linux-mysql-db.sh
=================================================================

Now let’s backup our MySQL Database:

=================================================================
cd ~ 
sudo chmod +x ./mysqlbackup.sh  
./mysqlbackup.sh
=================================================================

Upload the backup files to Our S3 Bucket:

===========================================================================================
cd /backup  
aws s3 cp /backup/ s3://[Insert-S3-Bucket-Name-From-Step-27]/backups/db_backups/ --recursive
===========================================================================================

Verify that the backup:

===========================================================================================
aws s3 ls s3://<Insert-S3-Bucket-Name-From-Step-27>/backups/db_backups/
===========================================================================================

Automate Backup & Upload:

===========================================================================================
cd ~
./mysqlbackup.sh [Insert-S3-Bucket-Name-From-Step-27]
===========================================================================================

Schedule Backup & Upload:

============================================================================================================================
echo "* * * * *  /home/ec2-user/mysqlbackup.sh [Insert-S3-Bucket-Name-From-Step-27] 2>&1 >> /tmp/cronlog" > ec2cron
sudo crontab -u ec2-user ec2cron
============================================================================================================================

Verify crontab:

===========================================================================================
crontab -l
===========================================================================================

Restore Steps A:

===========================================================================================================
mkdir -p /backup/restore
aws s3 ls s3://<Insert-S3-Bucket-Name-From-Step-27>/backups/db_backups/ 
aws s3 cp s3://<Insert-S3-Bucket-Name-From-Step-27>/backups/db_backups/<BACKUP-FILE> /backup/restore/res.sql
===========================================================================================================

Verify restore files locally:

===========================================================================================================
ls -l /backup/restore
===========================================================================================================

Restore MySQL:

===========================================================================================================
mysql -u root -ppassw-lab -e "DROP DATABASE IF EXISTS awslabrestore;"
mysql -u root -ppassw-lab -e "CREATE DATABASE awslabrestore;"
mysql -u root -ppassw-lab awslabrestore < /backup/restore/res.sql
===========================================================================================================

Verify Restore:
===========================================================================================================
mysql -u root -ppassw-lab awslabrestore
When logged in to the mysql prompt execute a select:   
select * from table_timestamp;
===========================================================================================================

==================================================================================================================

 Part 3: Restoring a MySQL Database Using a consistent point-in-time EBS Snapshot

==================================================================================================================

Records Instance ID:

==================================================================================================================
curl http://169.254.169.254/latest/meta-data/instance-id
==================================================================================================================

Extract Volume ID: 

==================================================================================================================
aws ec2 describe-volumes --output text| grep [INSTANCE-ID]
==================================================================================================================

Login to MySQL Instance:

==================================================================================================================
mysql -u root -ppassw-lab awslab
==================================================================================================================

MySQL Prompt Commands:

==================================================================================================================
FLUSH TABLES WITH READ LOCK;
SYSTEM sync
SYSTEM sudo xfs_freeze -f /data
==================================================================================================================

Take A snapshot:

======================================================================================================================
aws ec2 create-snapshot --volume-id [vol-xxxxxxxx-Recorded-Step-49] --description "Snapshot of /dev/sdf MySQL Database"
======================================================================================================================

Describe my own Snapshots:

======================================================================================================================
aws ec2 describe-snapshots --output table --owner self
======================================================================================================================

Resume Writes, At the MySQL Prompt:

======================================================================================================================
SYSTEM sudo xfs_freeze -u /data
UNLOCK TABLES;
======================================================================================================================

Data Corrupted, detach EBS:

======================================================================================================================
sudo /etc/init.d/mysqld stop
sudo umount /dev/sdf
aws ec2 detach-volume --volume-id [vol-xxxxxxxx]
======================================================================================================================

Get AZ of MySQL EC Instance:

======================================================================================================================
curl http://169.254.169.254/latest/meta-data/placement/availability-zone
======================================================================================================================

Create New EBS Volume from snapshot:

======================================================================================================================
aws ec2 create-volume --snapshot-id [snap-xxxxxxx] --availability-zone [AZ] --volume-type standard
======================================================================================================================

Verify new EBS Volume State:

======================================================================================================================
aws ec2 describe-volumes --volume-id [new-vol-xxxxxxx]
======================================================================================================================

Attach new EBS Volume:

======================================================================================================================
aws ec2 attach-volume --volume-id [new-vol-xxxxxxx] --instance-id [INSTANCE] --device /dev/sdf
======================================================================================================================

Mount and Start MySQL Instance:

======================================================================================================================
sudo mount -a
sudo /etc/init.d/mysqld start
======================================================================================================================

Login to the MySQL Instance:

======================================================================================================================
mysql -u root -ppassw-lab awslab
======================================================================================================================

Execute Select on MySQL Prompt:

======================================================================================================================
select * from table_timestamp;
======================================================================================================================


==================================================================================================================

 Appendix 1

==================================================================================================================

Connect to the LINUX Bastion Server (OS X AND LINUX)

==================================================================================================================
chmod 400 ~/Downloads/[qwiklab-xxxxxxx]pem
ssh –i ~/Downloads/[qwiklab-xxxxxxx] ec2-user@[Bastion-Public-IP]
==================================================================================================================

Jump From The Bastion host (OS X AND LINUX)

==================================================================================================================
ssh -i ~/awsstudent.id.rsa ec2-user@[My-SQL-EC2-Instance-Private-IP]
==================================================================================================================

© 2013 Amazon Web Services, Inc. or its affiliates. All rights reserved.
