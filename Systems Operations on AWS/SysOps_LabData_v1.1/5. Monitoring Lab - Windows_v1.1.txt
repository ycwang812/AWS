Systems Operations on AWS v1.1


++++  Lab 5: Monitoring - Windows  ++++


This file contains the UserData content that you need to complete the Monitoring Windows lab.

To use this file:

1. Locate the section you need. Each section in this file matches a section in the lab instructions.

2. Replace items in brackets - [] - with appropriate values. For example, in this command you would replace the value - [JobFlowID] - (including the brackets) with the parameter indicated in the lab instructions: 

   elastic-mapreduce --list [JobFlowID]

3. Do NOT enable the Word Wrap feature in Windows Notepad or the text editor you use to view this file.
 

=====================================================================================================================
=====================================================================================================================

Interacting with Amazon CloudWatch

=====================================================================================================================
=====================================================================================================================

Link to AWS Command Line Interface

=====================================================================================================================
https://s3.amazonaws.com/aws-cli/AWSCLI64.msi
=====================================================================================================================

Set the default AWS Region for CLI commands using an environment variable

=====================================================================================================================
[Environment]::SetEnvironmentVariable("AWS_DEFAULT_REGION", "<your-aws-region-id>", "User")

#e.g.: [Environment]::SetEnvironmentVariable("AWS_DEFAULT_REGION", "sa-east-1", "User")
=====================================================================================================================

Open a new PowerShell prompt and send a new metric datat to CloudWatch.

=====================================================================================================================
aws cloudwatch put-metric-data `
  --namespace Student `
  --metric-name AttentionLevel `
  --value 8 `
  --debug
=====================================================================================================================

Reading statistics using the CLI

Get the minimum attention level statistic from the shell using the CLI.

=====================================================================================================================
$yesterday=[DateTime]::Today.AddDays(-1).ToString("d")
$tomorrow=[DateTime]::Today.AddDays(1).ToString("d")
aws cloudwatch get-metric-statistics `
 --metric-name "AttentionLevel" `
 --namespace="Student" `
 --start-time=$yesterday `
 --end-time=$tomorrow `
 --period=300 `
 --statistics="Minimum"
=====================================================================================================================

Alarms and Notification

Generate a data point that triggers the alarm

=====================================================================================================================
aws cloudwatch put-metric-data `
  --namespace Student `
  --metric-name AttentionLevel `
  --value 4 `
  --debug
=====================================================================================================================
=====================================================================================================================

Integrating with Monitoring Services 

=====================================================================================================================
=====================================================================================================================

Starting the Monitoring Server

Start the Monitoring Server

=====================================================================================================================
netsh advfirewall set allprofiles state off
=====================================================================================================================

Links to dependencies:

Python: https://us-east-1-aws-training.s3.amazonaws.com/sys-ops-lab-vpc-monitoring-windows-v1.1/static/python-2.7.6.amd64.msi
SetupTools: https://us-east-1-aws-training.s3.amazonaws.com/sys-ops-lab-vpc-monitoring-windows-v1.1/static/setuptools-2.1.win-amd64-py2.7.exe
PIP: https://us-east-1-aws-training.s3.amazonaws.com/sys-ops-lab-vpc-monitoring-windows-v1.1/static/pip-1.5.2.win-amd64-py2.7.exe

=====================================================================================================================

Download and start the mock monitoring service.

=====================================================================================================================
c:\Python27\Scripts\pip install Flask
$wc = New-Object System.Net.WebClient
$url = "https://us-east-1-aws-training.s3.amazonaws.com/sys-ops-lab-vpc-monitoring-windows-v1.1/static/mon-server.py"
$wc.DownloadFile($url,"c:\\mon-server.py")
c:\Python27\python c:\mon-server.py
=====================================================================================================================

Issue an HTTP GET request to your server using its Private IP (including the "http://").

=====================================================================================================================
(New-Object System.Net.WebClient).DownloadString("<monitoring_server_url>")

#e.g.: (New-Object System.Net.WebClient).DownloadString("http://172.31.27.154")
=====================================================================================================================

Client Self-Registration

Open the Advanced Details and paste the following User data script

=====================================================================================================================
<powershell>
$InstanceId=(New-Object System.Net.WebClient).DownloadString("http://169.254.169.254/latest/meta-data/instance-id")
Invoke-RestMethod -Uri http://<monitring_server_url> `
 -Method PUT `
 -Body instanceId=$InstanceId `
 -ContentType application/x-www-form-urlencoded

</powershell>

#e.g.:
<powershell>
$InstanceId=(New-Object System.Net.WebClient).DownloadString("http://169.254.169.254/latest/meta-data/instance-id")
Invoke-RestMethod -Uri http://172.31.27.154 `
 -Method PUT `
 -Body instanceId=$InstanceId `
 -ContentType application/x-www-form-urlencoded
</powershell>
=====================================================================================================================

If your Powershell Command Line session, list the registered instances with a new http GET request:

=====================================================================================================================
(New-Object System.Net.WebClient).DownloadString("<monitoring_server_url>")

#e.g.: (New-Object System.Net.WebClient).DownloadString("http://172.31.27.154")
=====================================================================================================================

Full Scan / Config Rewrite

Schedule the scan/config rewrite - Allow script execution

=====================================================================================================================
Set-ExecutionPolicy unrestricted
=====================================================================================================================

Down load an run the instance polling script

=====================================================================================================================
$wc = New-Object System.Net.WebClient
$url = "https://us-east-1-aws-training.s3.amazonaws.com/sys-ops-lab-vpc-monitoring-windows-v1.1/static/poll-instances.ps1"
$wc.DownloadFile($url,"c:\poll-instances.ps1")
c:\poll-instances.ps1 <monitoring_server_url>

#e.g.: .\poll-instances.ps1 http://172.31.27.154
=====================================================================================================================
 
Messaging (SNS and SQS)

Consume Auto Scaling Event Messages - Download and inspect the script taht consumes event messages from SQS.

=====================================================================================================================
$wc = New-Object System.Net.WebClient
$url = "https://us-east-1-aws-training.s3.amazonaws.com/sys-ops-lab-vpc-monitoring-windows-v1.1/static/consume-events.ps1"
$wc.DownloadFile($url,"c:\consume-events.ps1")
c:consume-events.ps1 <monitoring-server-url> <queue-url>

#e.g.: c:\consume-events.ps1 http://172.31.27.154 https://sqs.sa-east-1.amazonaws.com/769662751619/autoScalingEventsQueue
=====================================================================================================================


© 2013, 2014 Amazon Web Services, Inc. or its affiliates. All rights reserved.
